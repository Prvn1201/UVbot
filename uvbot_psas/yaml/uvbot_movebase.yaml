##Action API
# move_base/goal (move_base_msgs/MoveBaseActionGoal) #A goal for move_base to pursue in the world.
# move_base/cancel (actionlib_msgs/GoalID) #A request to cancel a specific goal.
# move_base/feedback (move_base_msgs/MoveBaseActionFeedback) #Feedback contains the current position of the base in the world.
# move_base/status (actionlib_msgs/GoalStatusArray) #Provides status information on the goals that are sent to the move_base action.
# move_base/result (move_base_msgs/MoveBaseActionResult) #Result is empty for the move_base action.

##Subscribed Topics
# move_base_simple/goal (geometry_msgs/PoseStamped) #Provides a non-action interface to move_base for users that don't care about tracking the execution status of their goals.

##Published Topics
# cmd_vel (geometry_msgs/Twist) #A stream of velocity commands meant for execution by a mobile base.

##Services
# ~make_plan (nav_msgs/GetPlan) #Allows an external user to ask for a plan to a given pose from move_base without causing move_base to execute that plan.
# ~clear_unknown_space (std_srvs/Empty) #Allows an external user to tell move_base to clear unknown space in the area directly around the robot. This is useful when move_base has its costmaps stopped for a long period of time and then started again in a new location in the environment.
# ~clear_costmaps (std_srvs/Empty) #Allows an external user to tell move_base to clear obstacles in the costmaps used by move_base. This could cause a robot to hit things and should be used with caution.

##Parameters
base_global_planner: global_planner/GlobalPlanner #navfn/NavfnROS, global_planner/GlobalPlanner, carrot_planner/CarrotPlanner, The name of the plugin for the global planner to use with move_base, see pluginlib documentation for more details on plugins.
base_local_planner: teb_local_planner/TebLocalPlannerROS #base_local_planner/TrajectoryPlannerROS, dwa_local_planner/DWAPlannerROS, teb_local_planner/TebLocalPlannerROS, The name of the plugin for the local planner to use with move_base see pluginlib documentation for more details on plugins.
recovery_behaviors: #A list of recovery behavior plugins to use with move_base
  - {name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}
  - {name: rotate_recovery, type: rotate_recovery/RotateRecovery}
  - {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}
controller_frequency: 2.5 #20.0, The rate in Hz at which to run the control loop and send velocity commands to the base.
planner_patience: 5.0 #5.0, How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.
controller_patience: 15.0 #15.0, How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.
conservative_reset_dist: 3.0 #3.0, The distance away from the robot in meters beyond which obstacles will be cleared from the costmap when attempting to clear space in the map.
recovery_behavior_enabled: true #true, Whether or not to enable the move_base recovery behaviors to attempt to clear out space.
clearing_rotation_allowed: false #true, Determines whether or not the robot will attempt an in-place rotation when attempting to clear out space.
shutdown_costmaps: false #false, Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state.
oscillation_timeout: 0.0 #0.0, How long in seconds to allow for oscillation before executing recovery behaviors. A value of 0.0 corresponds to an infinite timeout.
oscillation_distance: 0.5 #0.5, How far in meters the robot must move to be considered not to be oscillating. Moving this far resets the timer counting up to the ~oscillation_timeout
planner_frequency: 0.0 #0.0, The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner will only run when a new goal is received or the local planner reports that its path is blocked
max_planning_retries: -1 #-1, How many times to allow for planning retries before executing recovery behaviors. A value of -1.0 corresponds to an infinite retries.

conservative_reset:
  reset_distance: 3.0 #3.0, The length of the side of a square centered on the robot pose, outside which obstacles will be removed from the costmaps when they are reverted to the static map.
rotate_recovery:
  sim_granularity: 0.017 #0.017, The distance in radians between checks for obstacles when checking if an in-place rotation is safe. Defaults to 1 degree.
  frequency: 20.0 #20.0, The frequency in HZ at which to send velocity commands to the mobile base.
aggressive_reset:
  reset_distance: 3.0 #3.0, The length of the side of a square centered on the robot pose, outside which obstacles will be removed from the costmaps when they are reverted to the static map.